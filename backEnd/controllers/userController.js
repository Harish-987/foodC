import userModel from "../models/userModel.js";
import jwt from "jsonwebtoken"
import bcrypt from 'bcrypt';
import validator from 'validator';

const createToken = (id) => {
    return jwt.sign({id},process.env.JWT_SECRET,{ expiresIn: '7d' });
}

//login user
const loginUser = async (req,res) => {
    const {email,password} = req.body;
    try {
        const user = await userModel.findOne({email});

        if(!user){
            res.json({success:false,message:"User doesn't exist"});
        }

        const isMatch = bcrypt.compare(password,user.password);

        if(!isMatch){
            return res.json({success:false,message:"invalid credentials"});
        }

        const token = createToken(user._id);
        res.json({success:true,token,message:"successfully logged in"});
    }
    catch (error) {
        console.log(error);
        res.json({success:false,message:"Error in loginUser"});
    }
}

//register user
const registerUser = async (req,res) => {
    const { name,email,password } = req.body;

    try {
        const exists = await userModel.findOne({email});
        if(exists){
            return res.json({success:false,message:"User already exists"});
        }
        //validate email and password
        if(!validator.isEmail(email)){
            return res.json({success:false,message:"please enter a valid email"});
        }
        if(password.length < 8){
            return res.json({success:false,message:"please enter a strong password"});
        }

        //hashing password
        const salt = await bcrypt.genSalt(10);
        const hashedPassword = await bcrypt.hash(password,salt);

        const newUser = new userModel({
            name:name,
            email:email,
            password:hashedPassword,
        });

        const user = await newUser.save();
        const token = createToken(user._id);// _id is a unique id generated by mongodb

        return res.json({success:true,token,message:"successfully registered"});
    } 
    catch(error){
        console.log(error);
        res.json({success:false,message:"Error in registerUser"});
    }
} 

export { loginUser,registerUser };